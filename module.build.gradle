if (isBuildModule.toBoolean()) {

    //作为一个单独的应用运行
    apply plugin: 'com.android.application'

} else {
    //作为组件运行，集合到宿主App中
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        multiDexEnabled true
    }

    //开启DataBinding
    dataBinding {
        enabled true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.versions.java
        targetCompatibility rootProject.ext.versions.java
    }

    sourceSets {
        main {
            //作为一个单独的module来运行
            if (isBuildModule.toBoolean()) {
                manifest.srcFile 'src/main/alone/Androidmanifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除alone文件夹下所有调试文件
                    exclude 'src/main/alone/*'
                }
            }

        }
    }

}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.androidx["androidx.appcompat"]
    implementation rootProject.ext.androidx["androidx.constraintlayout"]
    testImplementation rootProject.ext.androidx["androidx.junit"]
    androidTestImplementation rootProject.ext.androidx["androidx.test.ext:junit"]
    androidTestImplementation rootProject.ext.androidx["androidx.espresso"]

    implementation project(":library-base")
    implementation project(":library-network")
    implementation project(":library-service")
    implementation project(":library-res")
    implementation rootProject.ext.dependencies["ARouterApi"]
    kapt rootProject.ext.dependencies["ARouterCompiler"]
}